#Mapa de turbulencia con base distinguido
import numpy as np
import matplotlib.pyplot as plt
from py_wake.examples.data.hornsrev1 import Hornsrev1Site, V80, wt16_x, wt16_y
from py_wake.literature.gaussian_models import Bastankhah_PorteAgel_2014
from py_wake.turbulence_models.crespo import CrespoHernandez

# -------------------------------
# Función para simular y graficar
# -------------------------------
def run_and_plot_TI(base_TI):
    site = Hornsrev1Site()
    original_local_wind = site.local_wind

    # 🔧 Sobrescribimos la TI base
    def custom_local_wind(*args, **kwargs):
        lw = original_local_wind(*args, **kwargs)
        lw.TI = np.ones_like(lw.ws) * base_TI
        return lw

    site.local_wind = custom_local_wind
    ti_model = CrespoHernandez()
    model = Bastankhah_PorteAgel_2014(site, V80(), k=0.032, turbulenceModel=ti_model)

    sim_res = model(wt16_x, wt16_y)
    flow_map = sim_res.flow_map(wd=270, ws=10)  # Fijamos dirección y velocidad

    # Extraemos TI efectivo en malla
    ti_eff = flow_map.TI_eff.values[0, 0]  # [wd, ws, y, x] -> tomamos primera dirección y ws
    X, Y = np.meshgrid(flow_map.x, flow_map.y)

    # Convertir a coordenadas relativas
    X_rel = X - np.min(wt16_x)
    Y_rel = Y - np.min(wt16_y)

    # 🔥 GRAFICAMOS
    fig, ax = plt.subplots(1, 2, figsize=(12, 5))

    # 1️⃣ TI base (constante)
    im1 = ax[0].imshow(np.ones_like(ti_eff) * base_TI * 100,
                       extent=[X_rel.min(), X_rel.max(), Y_rel.min(), Y_rel.max()],
                       origin='lower', cmap='Blues')
    ax[0].scatter(wt16_x - np.min(wt16_x), wt16_y - np.min(wt16_y), color='k', s=15)
    ax[0].set_title(f"TI Base = {base_TI*100:.1f}%")
    ax[0].set_xlabel("X [m] (relativo)")
    ax[0].set_ylabel("Y [m] (relativo)")
    plt.colorbar(im1, ax=ax[0], label="TI [%]")

    # 2️⃣ TI efectivo (campo espacial)
    im2 = ax[1].imshow(ti_eff * 100,
                       extent=[X_rel.min(), X_rel.max(), Y_rel.min(), Y_rel.max()],
                       origin='lower', cmap='viridis')
    ax[1].scatter(wt16_x - np.min(wt16_x), wt16_y - np.min(wt16_y), color='k', s=15)
    ax[1].set_title("TI Efectivo (con wakes)")
    ax[1].set_xlabel("X [m] (relativo)")
    ax[1].set_ylabel("Y [m] (relativo)")
    plt.colorbar(im2, ax=ax[1], label="TI [%]")

    plt.suptitle(f"Comparación TI Base vs TI Efectivo - TI Base={base_TI*100:.1f}%")
    plt.tight_layout()
    plt.show()

# -------------------------------
# Ejecutar para varios TI
# -------------------------------
ti_values = [0.04, 0.08, 0.12]  # 4%, 8%, 12%
for ti in ti_values:
    run_and_plot_TI(ti)
