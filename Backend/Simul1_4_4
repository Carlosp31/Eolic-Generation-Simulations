#Mapa de turbulencias para varias turbulencias
import numpy as np
import matplotlib.pyplot as plt
from py_wake.examples.data.hornsrev1 import Hornsrev1Site, V80, wt16_x, wt16_y
from py_wake.literature.gaussian_models import Bastankhah_PorteAgel_2014
from py_wake.turbulence_models.crespo import CrespoHernandez

# Par치metros
ti_values = [0.04, 0.08, 0.12]   # TI de fondo a probar (fracci칩n: 0.04 = 4%)
wd = [270]
ws = [8]

def run_simulation_with_TI(base_TI):
    site = Hornsrev1Site()
    original_local_wind = site.local_wind

    def custom_local_wind(*args, **kwargs):
        lw = original_local_wind(*args, **kwargs)
        lw.TI = np.ones_like(lw.ws) * base_TI
        return lw

    site.local_wind = custom_local_wind
    k_dynamic = 0.3837 * base_TI + 0.003678
    ti_model = CrespoHernandez()
    model = Bastankhah_PorteAgel_2014(site, V80(), k=k_dynamic, turbulenceModel=ti_model)
    sim_res = model(wt16_x, wt16_y, wd=wd, ws=ws)
    return sim_res.flow_map(wd=wd, ws=ws)

maps = []
for ti in ti_values:
    print(f"Simulando TI base = {ti*100:.1f}% ...")
    fm = run_simulation_with_TI(ti)
    TI_raw = np.squeeze(np.array(fm.TI_eff))
    # Si est치 en fracci칩n convertir a %
    if np.nanmax(TI_raw) <= 1.5:
        TI_raw *= 100.0
    maps.append((fm.X, fm.Y, TI_raw))

# Graficar cada caso con su propio rango de color
fig, axes = plt.subplots(1, len(maps), figsize=(5*len(maps), 5), sharex=True, sharey=True)
if len(maps) == 1:
    axes = [axes]

for ax, (ti, (X, Y, TI)) in zip(axes, zip(ti_values, maps)):
    vmin = np.nanmin(TI)
    vmax = np.nanmax(TI)
    print(f"TI base {ti*100:.1f}% -> rango mostrado: {vmin:.2f}% - {vmax:.2f}%")
    cs = ax.contourf(X, Y, TI, levels=40, cmap="viridis", vmin=vmin, vmax=vmax)
    ax.scatter(wt16_x, wt16_y, c='white', edgecolors='black', s=15, zorder=3)
    ax.set_title(f"TI base = {ti*100:.1f}%")
    ax.set_xlabel("x [m]")
    if ax is axes[0]:
        ax.set_ylabel("y [m]")
    fig.colorbar(cs, ax=ax, fraction=0.046, pad=0.04, label="TI efectivo [%]")

plt.suptitle("Mapa de turbulencia efectiva para cada TI de fondo", fontsize=14)
plt.tight_layout()
plt.show()

